user www-data;

worker_processes  1;

events {
    worker_connections  1024;
}

rtmp {
    access_log logs/rtmp_access.log;

    server {

        listen 1935;

        chunk_size 4000;

        # TV mode: one publisher, many subscribers
        application mytv {

            # enable live streaming
            live on;

            #dash on;
            #dash_path /tmp/dash;
            #dash_fragment 15s;
            exec ffmpeg -i rtmp://localhost/$app/$name -async 1 -vsync -1
                        -c:v libx264 -c:a libvo_aacenc -b:v 256k -b:a 32k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_low
                        -c copy -f flv rtmp://localhost/show/$name_src;

            # record first 1M of stream
            record all;
            record_path /tmp/av;
            record_max_size 1M;

            # append current timestamp to each flv
            record_unique on;

	    on_publish http://localhost:8081/check;
	    on_publish_done http://localhost:8081/done;

            # publish only from localhost
            #allow publish 127.0.0.1;
            #deny publish all;

            #allow play all;
            exec_push /home/passick/streamer/screenshot_script.sh $name;
        }

        # HLS

        # For HLS to work please create a directory in tmpfs (/tmp/hls here)
        # for the fragments. The directory contents is served via HTTP (see
        # http{} section in config)
        #
        # Incoming stream must be in H264/AAC. For iPhones use baseline H264
        # profile (see ffmpeg example).
        # This example creates RTMP stream from movie ready for HLS:
        #
        # ffmpeg -loglevel verbose -re -i movie.avi  -vcodec libx264
        #    -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1
        #    -f flv rtmp://localhost:1935/hls/movie
        #
        # If you need to transcode live stream use 'exec' feature.
        #
        application show {
            live on;
            hls on;
            hls_path /tmp/hls;
            allow publish 127.0.0.1;
            
            # Instruct clients to adjust resolution according to bandwidth
            hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution
            #hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
            hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution
        }

        # MPEG-DASH is similar to HLS

        #application dash {
        #    live on;
        #    dash on;
        #    dash_path /tmp/dash;
        #}
    }
}

# HTTP can be used for accessing RTMP stats
http {
    sendfile off;
    tcp_nopush on;
    directio 512;

    server {

        listen      8080;

        # This URL provides RTMP statistics in XML
        location /stat {
            rtmp_stat all;

            # Use this stylesheet to view XML as web page
            # in browser
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            # XML stylesheet to view RTMP stats.
            # Copy stat.xsl wherever you want
            # and put the full directory path here
            root /path/to/stat.xsl/;
        }

        location /hls {
            # Serve HLS fragments
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
	    add_header 'Access-Control-Allow-Origin' '*';
            root /tmp;
            add_header Cache-Control no-cache;
        }

        location /dash {
	    add_header 'Access-Control-Allow-Origin' '*';
            # Serve DASH fragments
            root /tmp;
            add_header Cache-Control no-cache;
        }
	
        location /images {
	    add_header 'Access-Control-Allow-Origin' '*';
            # Serve pictures
            root /var/www;
            add_header Cache-Control no-cache;
        }
    }
    server {
        listen      8081;

	location /add {
		# include proxy_params;
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_pass http://unix:/home/passick/streamer/streamer.sock;
	}
	location / {
		allow 127.0.0.1;
		proxy_pass http://unix:/home/passick/streamer/streamer.sock;
	}
    }
}
